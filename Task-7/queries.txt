Queries used and their results

window functions enables calculations across set of rows related to current row, instead of summarizing the results 
it returns result for each row.

========================================================================================

row_number is used to assign sequential integer to all the rows, it can be combined with partition by to assign the row number within
dept.

partition by divides the result set to partitions then window function is applied

mysql> select EMPLOYEE_ID,name,deptid,salary,ROW_NUMBER() over (order by salary)as rn from employees;
+-------------+---------+--------+----------+----+
| EMPLOYEE_ID | name    | deptid | salary   | rn |
+-------------+---------+--------+----------+----+
|           1 | Muthu   |      2 | 30000.00 |  1 |
|          11 | Arun    |      2 | 32000.00 |  2 |
|           2 | Gotham  |      2 | 40000.00 |  3 |
|           3 | Mano    |      2 | 40000.00 |  4 |
|          12 | Suresh  |      2 | 41000.00 |  5 |
|           4 | Priya   |      2 | 42000.00 |  6 |
|           8 | Deepa   |      6 | 45000.00 |  7 |
|          18 | Rita    |      6 | 46000.00 |  8 |
|          17 | Ajay    |      6 | 47000.00 |  9 |
|          10 | Meera   |      8 | 48000.00 | 10 |
|          21 | Varun   |      8 | 49000.00 | 11 |
|           5 | Ravi    |      3 | 50000.00 | 12 |
|          22 | Pooja   |      8 | 50000.00 | 13 |
|          20 | Preeti  |      7 | 51000.00 | 14 |
|           9 | Karthik |      7 | 52000.00 | 15 |
|          13 | Neha    |      3 | 52000.00 | 16 |
|          14 | Anjali  |      3 | 53000.00 | 17 |
|          19 | Sanjay  |      7 | 53000.00 | 18 |
|           6 | Sneha   |      4 | 55000.00 | 19 |
|          15 | Rahul   |      5 | 58000.00 | 20 |
|           7 | Vikram  |      5 | 60000.00 | 21 |
|          16 | Divya   |      5 | 62000.00 | 22 |
+-------------+---------+--------+----------+----+
22 rows in set (0.02 sec)

mysql> SELECT EMPLOYEE_ID, NAME, DEPTID, SALARY,
    ->        ROW_NUMBER() OVER (PARTITION BY DEPTID ORDER BY SALARY) AS rn
    -> FROM employees;
+-------------+---------+--------+----------+----+
| EMPLOYEE_ID | NAME    | DEPTID | SALARY   | rn |
+-------------+---------+--------+----------+----+
|           1 | Muthu   |      2 | 30000.00 |  1 |
|          11 | Arun    |      2 | 32000.00 |  2 |
|           2 | Gotham  |      2 | 40000.00 |  3 |
|           3 | Mano    |      2 | 40000.00 |  4 |
|          12 | Suresh  |      2 | 41000.00 |  5 |
|           4 | Priya   |      2 | 42000.00 |  6 |
|           5 | Ravi    |      3 | 50000.00 |  1 |
|          13 | Neha    |      3 | 52000.00 |  2 |
|          14 | Anjali  |      3 | 53000.00 |  3 |
|           6 | Sneha   |      4 | 55000.00 |  1 |
|          15 | Rahul   |      5 | 58000.00 |  1 |
|           7 | Vikram  |      5 | 60000.00 |  2 |
|          16 | Divya   |      5 | 62000.00 |  3 |
|           8 | Deepa   |      6 | 45000.00 |  1 |
|          18 | Rita    |      6 | 46000.00 |  2 |
|          17 | Ajay    |      6 | 47000.00 |  3 |
|          20 | Preeti  |      7 | 51000.00 |  1 |
|           9 | Karthik |      7 | 52000.00 |  2 |
|          19 | Sanjay  |      7 | 53000.00 |  3 |
|          10 | Meera   |      8 | 48000.00 |  1 |
|          21 | Varun   |      8 | 49000.00 |  2 |
|          22 | Pooja   |      8 | 50000.00 |  3 |
+-------------+---------+--------+----------+----+
22 rows in set (0.02 sec)

========================================================================================

rank function assigns same rank to same values but leaves the gap after assigning same rank.

dense_rank doesnt leaves the num , it continues sequentially

mysql> select EMPLOYEE_ID,name,deptid,salary,Rank() over (partition by deptid order by salary desc)as rank_num from employees;
+-------------+---------+--------+----------+----------+
| EMPLOYEE_ID | name    | deptid | salary   | rank_num |
+-------------+---------+--------+----------+----------+
|           4 | Priya   |      2 | 42000.00 |        1 |
|          12 | Suresh  |      2 | 41000.00 |        2 |
|           2 | Gotham  |      2 | 40000.00 |        3 |
|           3 | Mano    |      2 | 40000.00 |        3 |
|          11 | Arun    |      2 | 32000.00 |        5 |
|           1 | Muthu   |      2 | 30000.00 |        6 |
|          14 | Anjali  |      3 | 53000.00 |        1 |
|          13 | Neha    |      3 | 52000.00 |        2 |
|           5 | Ravi    |      3 | 50000.00 |        3 |
|           6 | Sneha   |      4 | 55000.00 |        1 |
|          16 | Divya   |      5 | 62000.00 |        1 |
|           7 | Vikram  |      5 | 60000.00 |        2 |
|          15 | Rahul   |      5 | 58000.00 |        3 |
|          17 | Ajay    |      6 | 47000.00 |        1 |
|          18 | Rita    |      6 | 46000.00 |        2 |
|           8 | Deepa   |      6 | 45000.00 |        3 |
|          19 | Sanjay  |      7 | 53000.00 |        1 |
|           9 | Karthik |      7 | 52000.00 |        2 |
|          20 | Preeti  |      7 | 51000.00 |        3 |
|          22 | Pooja   |      8 | 50000.00 |        1 |
|          21 | Varun   |      8 | 49000.00 |        2 |
|          10 | Meera   |      8 | 48000.00 |        3 |
+-------------+---------+--------+----------+----------+
22 rows in set (0.02 sec)

mysql> select EMPLOYEE_ID,name,deptid,salary,dense_Rank() over (partition by deptid order by salary desc)as rank_num from employees;
+-------------+---------+--------+----------+----------+
| EMPLOYEE_ID | name    | deptid | salary   | rank_num |
+-------------+---------+--------+----------+----------+
|           4 | Priya   |      2 | 42000.00 |        1 |
|          12 | Suresh  |      2 | 41000.00 |        2 |
|           2 | Gotham  |      2 | 40000.00 |        3 |
|           3 | Mano    |      2 | 40000.00 |        3 |
|          11 | Arun    |      2 | 32000.00 |        4 |
|           1 | Muthu   |      2 | 30000.00 |        5 |
|          14 | Anjali  |      3 | 53000.00 |        1 |
|          13 | Neha    |      3 | 52000.00 |        2 |
|           5 | Ravi    |      3 | 50000.00 |        3 |
|           6 | Sneha   |      4 | 55000.00 |        1 |
|          16 | Divya   |      5 | 62000.00 |        1 |
|           7 | Vikram  |      5 | 60000.00 |        2 |
|          15 | Rahul   |      5 | 58000.00 |        3 |
|          17 | Ajay    |      6 | 47000.00 |        1 |
|          18 | Rita    |      6 | 46000.00 |        2 |
|           8 | Deepa   |      6 | 45000.00 |        3 |
|          19 | Sanjay  |      7 | 53000.00 |        1 |
|           9 | Karthik |      7 | 52000.00 |        2 |
|          20 | Preeti  |      7 | 51000.00 |        3 |
|          22 | Pooja   |      8 | 50000.00 |        1 |
|          21 | Varun   |      8 | 49000.00 |        2 |
|          10 | Meera   |      8 | 48000.00 |        3 |
+-------------+---------+--------+----------+----------+
22 rows in set (0.01 sec)

========================================================================================

mysql> select EMPLOYEE_ID,name,deptid,salary,sum(salary) over (order by employee_id)as cummulative_sal from employees;
+-------------+---------+--------+----------+-----------------+
| EMPLOYEE_ID | name    | deptid | salary   | cummulative_sal |
+-------------+---------+--------+----------+-----------------+
|           1 | Muthu   |      2 | 30000.00 |        30000.00 |
|           2 | Gotham  |      2 | 40000.00 |        70000.00 |
|           3 | Mano    |      2 | 40000.00 |       110000.00 |
|           4 | Priya   |      2 | 42000.00 |       152000.00 |
|           5 | Ravi    |      3 | 50000.00 |       202000.00 |
|           6 | Sneha   |      4 | 55000.00 |       257000.00 |
|           7 | Vikram  |      5 | 60000.00 |       317000.00 |
|           8 | Deepa   |      6 | 45000.00 |       362000.00 |
|           9 | Karthik |      7 | 52000.00 |       414000.00 |
|          10 | Meera   |      8 | 48000.00 |       462000.00 |
|          11 | Arun    |      2 | 32000.00 |       494000.00 |
|          12 | Suresh  |      2 | 41000.00 |       535000.00 |
|          13 | Neha    |      3 | 52000.00 |       587000.00 |
|          14 | Anjali  |      3 | 53000.00 |       640000.00 |
|          15 | Rahul   |      5 | 58000.00 |       698000.00 |
|          16 | Divya   |      5 | 62000.00 |       760000.00 |
|          17 | Ajay    |      6 | 47000.00 |       807000.00 |
|          18 | Rita    |      6 | 46000.00 |       853000.00 |
|          19 | Sanjay  |      7 | 53000.00 |       906000.00 |
|          20 | Preeti  |      7 | 51000.00 |       957000.00 |
|          21 | Varun   |      8 | 49000.00 |      1006000.00 |
|          22 | Pooja   |      8 | 50000.00 |      1056000.00 |
+-------------+---------+--------+----------+-----------------+
22 rows in set (0.04 sec)

========================================================================================

mysql> select EMPLOYEE_ID,name,deptid,salary,avg(salary) over (order by employee_id rows between 2 preceding and current row)as avg_sal from employees;
+-------------+---------+--------+----------+--------------+
| EMPLOYEE_ID | name    | deptid | salary   | avg_sal      |
+-------------+---------+--------+----------+--------------+
|           1 | Muthu   |      2 | 30000.00 | 30000.000000 |
|           2 | Gotham  |      2 | 40000.00 | 35000.000000 |
|           3 | Mano    |      2 | 40000.00 | 36666.666667 |
|           4 | Priya   |      2 | 42000.00 | 40666.666667 |
|           5 | Ravi    |      3 | 50000.00 | 44000.000000 |
|           6 | Sneha   |      4 | 55000.00 | 49000.000000 |
|           7 | Vikram  |      5 | 60000.00 | 55000.000000 |
|           8 | Deepa   |      6 | 45000.00 | 53333.333333 |
|           9 | Karthik |      7 | 52000.00 | 52333.333333 |
|          10 | Meera   |      8 | 48000.00 | 48333.333333 |
|          11 | Arun    |      2 | 32000.00 | 44000.000000 |
|          12 | Suresh  |      2 | 41000.00 | 40333.333333 |
|          13 | Neha    |      3 | 52000.00 | 41666.666667 |
|          14 | Anjali  |      3 | 53000.00 | 48666.666667 |
|          15 | Rahul   |      5 | 58000.00 | 54333.333333 |
|          16 | Divya   |      5 | 62000.00 | 57666.666667 |
|          17 | Ajay    |      6 | 47000.00 | 55666.666667 |
|          18 | Rita    |      6 | 46000.00 | 51666.666667 |
|          19 | Sanjay  |      7 | 53000.00 | 48666.666667 |
|          20 | Preeti  |      7 | 51000.00 | 50000.000000 |
|          21 | Varun   |      8 | 49000.00 | 51000.000000 |
|          22 | Pooja   |      8 | 50000.00 | 50000.000000 |
+-------------+---------+--------+----------+--------------+
22 rows in set (0.01 sec)

========================================================================================

mysql> select EMPLOYEE_ID,name,deptid,salary,avg(salary) over (order by employee_id range between UNBOUNDED PRECEDING and current row)as avg_sal from employees;
+-------------+---------+--------+----------+--------------+
| EMPLOYEE_ID | name    | deptid | salary   | avg_sal      |
+-------------+---------+--------+----------+--------------+
|           1 | Muthu   |      2 | 30000.00 | 30000.000000 |
|           2 | Gotham  |      2 | 40000.00 | 35000.000000 |
|           3 | Mano    |      2 | 40000.00 | 36666.666667 |
|           4 | Priya   |      2 | 42000.00 | 38000.000000 |
|           5 | Ravi    |      3 | 50000.00 | 40400.000000 |
|           6 | Sneha   |      4 | 55000.00 | 42833.333333 |
|           7 | Vikram  |      5 | 60000.00 | 45285.714286 |
|           8 | Deepa   |      6 | 45000.00 | 45250.000000 |
|           9 | Karthik |      7 | 52000.00 | 46000.000000 |
|          10 | Meera   |      8 | 48000.00 | 46200.000000 |
|          11 | Arun    |      2 | 32000.00 | 44909.090909 |
|          12 | Suresh  |      2 | 41000.00 | 44583.333333 |
|          13 | Neha    |      3 | 52000.00 | 45153.846154 |
|          14 | Anjali  |      3 | 53000.00 | 45714.285714 |
|          15 | Rahul   |      5 | 58000.00 | 46533.333333 |
|          16 | Divya   |      5 | 62000.00 | 47500.000000 |
|          17 | Ajay    |      6 | 47000.00 | 47470.588235 |
|          18 | Rita    |      6 | 46000.00 | 47388.888889 |
|          19 | Sanjay  |      7 | 53000.00 | 47684.210526 |
|          20 | Preeti  |      7 | 51000.00 | 47850.000000 |
|          21 | Varun   |      8 | 49000.00 | 47904.761905 |
|          22 | Pooja   |      8 | 50000.00 | 48000.000000 |
+-------------+---------+--------+----------+--------------+
22 rows in set (0.00 sec)

========================================================================================

lead allows you to access subsequent rows
lag allows you to access previous rows

mysql> select EMPLOYEE_ID,name,deptid,salary,lead(salary,1) over (order by employee_id)as next_sal,lag(salary,1) over (order by employee_id)as prev_sal from employees;
+-------------+---------+--------+----------+----------+----------+
| EMPLOYEE_ID | name    | deptid | salary   | next_sal | prev_sal |
+-------------+---------+--------+----------+----------+----------+
|           1 | Muthu   |      2 | 30000.00 | 40000.00 |     NULL |
|           2 | Gotham  |      2 | 40000.00 | 40000.00 | 30000.00 |
|           3 | Mano    |      2 | 40000.00 | 42000.00 | 40000.00 |
|           4 | Priya   |      2 | 42000.00 | 50000.00 | 40000.00 |
|           5 | Ravi    |      3 | 50000.00 | 55000.00 | 42000.00 |
|           6 | Sneha   |      4 | 55000.00 | 60000.00 | 50000.00 |
|           7 | Vikram  |      5 | 60000.00 | 45000.00 | 55000.00 |
|           8 | Deepa   |      6 | 45000.00 | 52000.00 | 60000.00 |
|           9 | Karthik |      7 | 52000.00 | 48000.00 | 45000.00 |
|          10 | Meera   |      8 | 48000.00 | 32000.00 | 52000.00 |
|          11 | Arun    |      2 | 32000.00 | 41000.00 | 48000.00 |
|          12 | Suresh  |      2 | 41000.00 | 52000.00 | 32000.00 |
|          13 | Neha    |      3 | 52000.00 | 53000.00 | 41000.00 |
|          14 | Anjali  |      3 | 53000.00 | 58000.00 | 52000.00 |
|          15 | Rahul   |      5 | 58000.00 | 62000.00 | 53000.00 |
|          16 | Divya   |      5 | 62000.00 | 47000.00 | 58000.00 |
|          17 | Ajay    |      6 | 47000.00 | 46000.00 | 62000.00 |
|          18 | Rita    |      6 | 46000.00 | 53000.00 | 47000.00 |
|          19 | Sanjay  |      7 | 53000.00 | 51000.00 | 46000.00 |
|          20 | Preeti  |      7 | 51000.00 | 49000.00 | 53000.00 |
|          21 | Varun   |      8 | 49000.00 | 50000.00 | 51000.00 |
|          22 | Pooja   |      8 | 50000.00 |     NULL | 49000.00 |
+-------------+---------+--------+----------+----------+----------+
22 rows in set (0.00 sec)

