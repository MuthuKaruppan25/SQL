Queries used and their results

========================================================================================

Creating Normalized Table

Normalization helps to prevent data redundancy and prevents anomalies.

1nf - each column should have indivisible values

2nf - no partial function dependency should be present, each non key attribute should be fully depend on primary key

3nf - no transitive function dependency, all non-key attribute doesnt depend on other non key attribute

bcnf - every determinant must be a candidate key

these are the tables that are created based on norm forms 

Customers:

mysql> describe customers;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| customer_id | int          | NO   | PRI | NULL    | auto_increment |
| name        | varchar(100) | YES  | MUL | NULL    |                |
| phone_no    | varchar(10)  | YES  | UNI | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
3 rows in set (0.05 sec)

Products:

mysql> describe products;
+--------------+---------------+------+-----+---------+----------------+
| Field        | Type          | Null | Key | Default | Extra          |
+--------------+---------------+------+-----+---------+----------------+
| product_id   | int           | NO   | PRI | NULL    | auto_increment |
| product_name | varchar(50)   | YES  | MUL | NULL    |                |
| price        | decimal(10,2) | YES  |     | NULL    |                |
| stock        | int           | YES  |     | NULL    |                |
+--------------+---------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

Orders:

mysql> describe orders;
+-------------+-----------+------+-----+-------------------+-------------------+
| Field       | Type      | Null | Key | Default           | Extra             |
+-------------+-----------+------+-----+-------------------+-------------------+
| order_id    | int       | NO   | PRI | NULL              | auto_increment    |
| customer_id | int       | YES  | MUL | NULL              |                   |
| order_date  | timestamp | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+-------------+-----------+------+-----+-------------------+-------------------+
3 rows in set (0.00 sec)

OrderDetails:


mysql> describe orderDetails;
+-----------------+---------------+------+-----+---------+----------------+
| Field           | Type          | Null | Key | Default | Extra          |
+-----------------+---------------+------+-----+---------+----------------+
| order_detail_id | int           | NO   | PRI | NULL    | auto_increment |
| order_id        | int           | YES  | MUL | NULL    |                |
| product_id      | int           | YES  | MUL | NULL    |                |
| quantity        | int           | YES  |     | NULL    |                |
| price           | decimal(10,2) | YES  |     | NULL    |                |
+-----------------+---------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)


========================================================================================

Index uses data structure to speed up the querying process resulting in faster fetch.

mysql> explain select * from products where product_name = 'laptop';
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | products | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |    12.50 | Using where |
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.01 sec)

mysql> create index  pdt_index on products(product_name);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql>  explain select * from products where product_name = 'laptop';
+----+-------------+----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+
| id | select_type | table    | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra |
+----+-------------+----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | products | NULL       | ref  | pdt_index     | pdt_index | 203     | const |    2 |   100.00 | NULL  |
+----+-------------+----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)


========================================================================================

Triggers executes the specific function when any of the specified event occurs in the table

mysql>
    -> create trigger reduct_stock after insert on orderDetails
    -> for each row
    -> begin
    ->     update products
    ->     set stock = stock - new.quantity
    ->     where product_id = new.product_id;
    -> end $$
Query OK, 0 rows affected (0.03 sec)

mysql> delimiter ;

mysql> select * from products;
+------------+--------------+---------+-------+
| product_id | product_name | price   | stock |
+------------+--------------+---------+-------+
|          1 | Laptop       | 1200.00 |    10 |
|          2 | Phone        |  800.00 |    15 |
|          3 | Tablet       |  500.00 |    20 |
|          4 | Laptop       | 1200.00 |    10 |
|          5 | Phone        |  800.00 |    15 |
|          6 | Tablet       |  500.00 |    20 |
|          7 | Smartwatch   |  250.00 |    30 |
|          8 | Headphones   |  100.00 |    40 |
+------------+--------------+---------+-------+
8 rows in set (0.01 sec)

mysql> insert into orders (customer_id,order_date) values (2,current_timestamp());
Query OK, 1 row affected (0.01 sec)

mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
+----------+-------------+---------------------+
12 rows in set (0.00 sec)

mysql> insert into orderDetails (order_id,product_id,quantity,price) values(20,1,5,5000);
Query OK, 1 row affected (0.01 sec)

mysql> select * from products;
+------------+--------------+---------+-------+
| product_id | product_name | price   | stock |
+------------+--------------+---------+-------+
|          1 | Laptop       | 1200.00 |     5 |
|          2 | Phone        |  800.00 |    15 |
|          3 | Tablet       |  500.00 |    20 |
|          4 | Laptop       | 1200.00 |    10 |
|          5 | Phone        |  800.00 |    15 |
|          6 | Tablet       |  500.00 |    20 |
|          7 | Smartwatch   |  250.00 |    30 |
|          8 | Headphones   |  100.00 |    40 |
+------------+--------------+---------+-------+
8 rows in set (0.00 sec)

here i have inserted the quantity 5 of laptop to the orderDetails table, now quantity 5 is decremented from the 
products table

========================================================================================

Another example using trigger

mysql> create trigger prevent_over_ordering before insert on orderDetails
    -> for each row
    -> begin
    ->     declare available_stock int;
    ->     select stock into available_stock from products where product_id = new.product_id;
    ->     if available_stock < new.quantity then
    ->         signal sqlstate '45000'
    ->         set message_text = 'not enough stock availabe';
    ->     end if;
    ->
    -> end $$
Query OK, 0 rows affected (0.07 sec)

mysql> delimiter ;
mysql> insert into orders (customer_id,order_date) values (3,current_timestamp());
Query OK, 1 row affected (0.01 sec)

mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
+----------+-------------+---------------------+
13 rows in set (0.01 sec)

mysql> insert into orderDetails (order_id,product_id,quantity,price) values(21,1,7,7400);
ERROR 1644 (45000): not enough stock availabe

========================================================================================

Transaction

mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
|       31 |           3 | 2025-03-28 17:56:06 |
|       32 |           3 | 2025-03-28 17:57:11 |
|       33 |           3 | 2025-03-28 17:58:14 |
+----------+-------------+---------------------+
16 rows in set (0.00 sec)

mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT stock FROM products WHERE product_id = 1 FOR UPDATE;
+-------+
| stock |
+-------+
|     1 |
+-------+
1 row in set (0.01 sec)



mysql> SELECT stock FROM products WHERE product_id = 2 FOR UPDATE;
+-------+
| stock |
+-------+
|    15 |
+-------+
1 row in set (0.00 sec)



mysql> INSERT INTO orders (customer_id, order_date) VALUES (3, NOW());
Query OK, 1 row affected (0.01 sec)



mysql> SET @new_order_id = LAST_INSERT_ID();
Query OK, 0 rows affected (0.01 sec)



mysql> INSERT INTO orderDetails (order_id, product_id, quantity, price)
    -> VALUES (@new_order_id, 1, 4, (SELECT price FROM products WHERE product_id = 1) * 4);
ERROR 1644 (45000): not enough stock availabe
mysql> INSERT INTO orderDetails (order_id, product_id, quantity, price)
    -> VALUES (@new_order_id, 2, 4, (SELECT price FROM products WHERE product_id = 1) * 4);
ERROR 1442 (HY000): Can't update table 'products' in stored function/trigger because it is already used by statement which invoked this stored function/trigger.
mysql> rollback;
Query OK, 0 rows affected (0.00 sec)



mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
|       31 |           3 | 2025-03-28 17:56:06 |
|       32 |           3 | 2025-03-28 17:57:11 |
|       33 |           3 | 2025-03-28 17:58:14 |
+----------+-------------+---------------------+
16 rows in set (0.00 sec)

========================================================================================

Savepoint and rollback

mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
|       31 |           3 | 2025-03-28 17:56:06 |
|       32 |           3 | 2025-03-28 17:57:11 |
|       33 |           3 | 2025-03-28 17:58:14 |
|       36 |           3 | 2025-03-28 18:08:08 |
+----------+-------------+---------------------+
17 rows in set (0.05 sec)

mysql> savepoint s1;
Query OK, 0 rows affected (0.01 sec)

mysql> insert into orders (customer_id) values(2);
Query OK, 1 row affected (0.01 sec)

mysql>
mysql> select * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
|       31 |           3 | 2025-03-28 17:56:06 |
|       32 |           3 | 2025-03-28 17:57:11 |
|       33 |           3 | 2025-03-28 17:58:14 |
|       36 |           3 | 2025-03-28 18:08:08 |
|       37 |           2 | 2025-03-28 18:19:31 |
+----------+-------------+---------------------+
18 rows in set (0.00 sec)

mysql> rollback to s1;
Query OK, 0 rows affected (0.01 sec)

mysql> select
    -> * from orders;
+----------+-------------+---------------------+
| order_id | customer_id | order_date          |
+----------+-------------+---------------------+
|        1 |           1 | 2025-03-28 14:29:57 |
|        2 |           2 | 2025-03-28 14:29:57 |
|        3 |           3 | 2025-03-28 14:29:57 |
|       12 |           1 | 2024-03-10 09:15:00 |
|       13 |           2 | 2024-03-12 14:30:00 |
|       14 |           3 | 2024-03-15 18:45:00 |
|       15 |          12 | 2024-03-18 11:00:00 |
|       16 |          13 | 2024-03-20 20:10:00 |
|       17 |           1 | 2024-03-22 10:45:00 |
|       18 |           2 | 2024-03-25 15:20:00 |
|       19 |           3 | 2024-03-27 12:00:00 |
|       20 |           2 | 2025-03-28 14:54:09 |
|       21 |           3 | 2025-03-28 15:04:01 |
|       31 |           3 | 2025-03-28 17:56:06 |
|       32 |           3 | 2025-03-28 17:57:11 |
|       33 |           3 | 2025-03-28 17:58:14 |
|       36 |           3 | 2025-03-28 18:08:08 |
+----------+-------------+---------------------+
17 rows in set (0.00 sec)

========================================================================================
View

create view customerOrders as
select o.order_id,c.name,p.product_name,od.quantity,(od.quantity*p.price) as totalPrice, o.order_date
from orders o join orderDetails od on o.order_id = od.order_id join customers c on o.customer_id = c.customer_id
join products p on od.product_id = p.product_id;

mysql> create view customerOrders as
    -> select o.order_id,c.name,p.product_name,od.quantity,(od.quantity*p.price) as totalPrice, o.order_date
    -> from orders o join orderDetails od on o.order_id = od.order_id join customers c on o.customer_id = c.customer_id
    -> join products p on od.product_id = p.product_id;
Query OK, 0 rows affected (0.01 sec)

mysql> select * from customerOrders;
+----------+---------------+--------------+----------+------------+---------------------+
| order_id | name          | product_name | quantity | totalPrice | order_date          |
+----------+---------------+--------------+----------+------------+---------------------+
|        1 | Alice Johnson | Laptop       |        1 |    1200.00 | 2025-03-28 14:29:57 |
|        1 | Alice Johnson | Phone        |        2 |    1600.00 | 2025-03-28 14:29:57 |
|       12 | Alice Johnson | Laptop       |        2 |    2400.00 | 2024-03-10 09:15:00 |
|       12 | Alice Johnson | Tablet       |        1 |     500.00 | 2024-03-10 09:15:00 |
|       17 | Alice Johnson | Phone        |        3 |    2400.00 | 2024-03-22 10:45:00 |
|        2 | Bob Smith     | Tablet       |        1 |     500.00 | 2025-03-28 14:29:57 |
|       13 | Bob Smith     | Phone        |        1 |     800.00 | 2024-03-12 14:30:00 |
|       13 | Bob Smith     | Smartwatch   |        2 |     500.00 | 2024-03-12 14:30:00 |
|       18 | Bob Smith     | Smartwatch   |        1 |     250.00 | 2024-03-25 15:20:00 |
|       20 | Bob Smith     | Laptop       |        5 |    6000.00 | 2025-03-28 14:54:09 |
|        3 | Charlie Brown | Phone        |        1 |     800.00 | 2025-03-28 14:29:57 |
|       14 | Charlie Brown | Headphones   |        3 |     300.00 | 2024-03-15 18:45:00 |
|       19 | Charlie Brown | Headphones   |        2 |     200.00 | 2024-03-27 12:00:00 |
|       15 | David Lee     | Laptop       |        1 |    1200.00 | 2024-03-18 11:00:00 |
|       16 | Emma Watson   | Tablet       |        2 |    1000.00 | 2024-03-20 20:10:00 |
+----------+---------------+--------------+----------+------------+---------------------+
15 rows in set (0.02 sec)

========================================================================================

Testing Queries


Testing constraints

mysql> INSERT INTO orders (customer_id, order_date) VALUES (999, NOW());
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`ecommerce`.`orders`, CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`customer_id`))

Testing Triggers

mysql> SELECT stock FROM products WHERE product_id = 1;
+-------+
| stock |
+-------+
|     1 |
+-------+
1 row in set (0.01 sec)

mysql> INSERT INTO orders (customer_id, order_date) VALUES (3, NOW());
Query OK, 1 row affected (0.01 sec)

mysql> SET @order_id = LAST_INSERT_ID();
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO orderDetails (order_id, product_id, quantity, price)
    -> VALUES (@order_id, 1, 2, (SELECT price FROM products WHERE product_id = 1) * 2);
ERROR 1644 (45000): not enough stock availabe
mysql>

